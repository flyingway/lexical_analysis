#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "iostream"
#include "pthread.h"
#define NUM_THREADS 4
using namespace std;

struct fun_para{
    char resourceProject[2000];
    char token[20] = { 0 };
    int syn = -1, i;//初始化
    int pProject = 0;//指针
    int *threadNum =(int*)malloc(4);
};

//全局变量，保留字表
static char reserveWord[32][20] = {
    "auto", "break", "case", "char", "const", "continue",
    "default", "do", "double", "else", "enum", "extern",
    "float", "for", "goto", "if", "int", "long",
    "register", "return", "short", "signed", "sizeof", "static",
    "struct", "switch", "typedef", "union", "unsigned", "void",
    "volatile", "while"
};
//界符运算符表,可扩展 
static char operatorOrDelimiter[36][10] = {
    "+", "-", "*", "/", "<", "<=", ">", ">=", "=", "==",
    "!=", ";", "(", ")", "^", ",", "\"", "\'", "#", "&",
    "&&", "|", "||", "%", "~", "<<", ">>", "[", "]", "{",
    "}", "\\", ".", "\?", ":", "!"
};

static  char IDentifierTbl[1000][50] = { "" };//标识符表

//查找保留字
int searchReserve(char reserveWord[][20], char s[])
{
    for (int i = 0; i < 32; i++)
    {
        if (strcmp(reserveWord[i], s) == 0)
        {
            return i + 1;//返回种别码
        }
    }
    return -1;//查找不成功，标识符
}
//查找保留字

//判断是否为字母
bool IsLetter(char letter)
{//C语言允许下划线的问题 
    if (letter >= 'a'&&letter <= 'z' || letter >= 'A'&&letter <= 'Z'|| letter=='_')
    {
        return true;
    }
    else
    {
        return false;
    }
}
//判断是否为字母


//判断是否为数字
bool IsDigit(char digit)
{
    if (digit >= '0'&&digit <= '9')
    {
        return true;
    }
    else
    {
        return false;
    }
}
//判断是否为数字


//编译预处理，取出无用的字符和注释
void filterResource(char r[], int pProject)
{
    char tempString[10000];
    int count = 0;
    for (int i = 0; i <= pProject; i++)
    {
        if (r[i] == '/'&&r[i + 1] == '/')
        {//如果是单行注释“//”,去除注释后东西，直至遇到回车
            while (r[i] != '\n')
            {
                i++;//向后扫描
            }
        }
        if (r[i] == '/'&&r[i + 1] == '*')
        {//如果是多行注释“/* 。。。*/”去除内容
            i += 2;
            while (r[i] != '*' || r[i + 1] != '/')
            {
                i++;//继续扫描
                if (r[i] == '$')//设定‘$’为结束符 
                {
                    printf("注释出错，没有找到 */，程序结束！！！\n");
                    exit(0);
                }
            }
            i += 2;//跨过“*/”
        }
        if (r[i] != '\n'&&r[i] != '\t'&&r[i] != '\v'&&r[i] != '\r')
        {//出现无用字符，过滤；否则加载
            tempString[count++] = r[i];
        }
    }
    tempString[count] = '\0';
    strcpy(r, tempString);//产生净化之后的源程序
}
//编译预处理，取出无用的字符和注释


//分析子程序，核心
void Scanner(int &syn, char resourceProject[], char token[], int &pProject)
{//根据DFA的状态转换图设计
    int i, count = 0;//count是token[]的指示器，收集有用字符
    char ch;//作为判断使用
    ch = resourceProject[pProject];
    while (ch == ' ')
    {//过滤空格，防止程序因识别不了空格直接结束 
        pProject++;
        ch = resourceProject[pProject];
    }
    for (i = 0; i<20; i++)
    {//收集前先清零
        token[i] = '\0';
    }
    if (IsLetter(resourceProject[pProject]))
    {//开头为字母
        token[count++] = resourceProject[pProject];//收集
        pProject++;//下移
        while (IsLetter(resourceProject[pProject]) || IsDigit(resourceProject[pProject]))
        {//后跟字母或数字
            token[count++] = resourceProject[pProject];//收集
            pProject++;//下移
        }//多读了一个字符既是下次将要开始的指针位置
        token[count] = '\0';
        syn = searchReserve(reserveWord, token);//查表找到种别码
        if (syn == -1)
        {//若不是保留字则是标识符
            syn = 100;//标识符种别码
        }
        return;
    }
    else if (IsDigit(resourceProject[pProject]))
    {//首字符为数字
        while (IsDigit(resourceProject[pProject]))
        {//后跟数字
            token[count++] = resourceProject[pProject];//收集
            pProject++;
        }//多读了一个字符既是下次将要开始的指针位置
        token[count] = '\0';
        syn = 99;//常数种别码
    }
    else if (ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == ';' || ch == '(' || ch == ')' || ch == '^'
        || ch == ',' || ch == '\"' || ch == '\'' || ch == '~' || ch == '#' || ch == '%' || ch == '['
        || ch == ']' || ch == '{' || ch == '}' || ch == '\\' || ch == '.' || ch == '\?' || ch == ':')
    {//若为运算符或者界符，查表得到结果
        token[0] = resourceProject[pProject];//形成单字符串
        token[1] = '\0';
        for (i = 0; i<36; i++)
        {//查运算符界符表
            if (strcmp(token, operatorOrDelimiter[i]) == 0)
            {
                syn = 33 + i;//获得种别码，一个小方法，貌似叫线性映射
                break;//查到退出
            }
        }
        pProject++;//指针下移，为下一扫描做准备
        return;
    }
    else  if (resourceProject[pProject] == '<')//检测双界符 
    {//解释<,<=,<<
        pProject++;//后移，超前搜索
        if (resourceProject[pProject] == '=')
        {
            syn = 38;
        }
        else if (resourceProject[pProject] == '<')
        {//左移
            pProject--;
            syn = 58;
        }
        else
        {
            pProject--;
            syn = 37;
        }
        pProject++;//指针下移
        return;
    }
    else  if (resourceProject[pProject] == '>')
    {//解释>,>=,>>
        pProject++;
        if (resourceProject[pProject] == '=')
        {
            syn = 40;
        }
        else if (resourceProject[pProject] == '>')
        {
            syn = 59;
        }
        else
        {
            pProject--;
            syn = 39;
        }
        pProject++;
        return;
    }
    else  if (resourceProject[pProject] == '=')
    {//解释=.==
        pProject++;
        if (resourceProject[pProject] == '=')
        {
            syn = 42;
        }
        else
        {
            pProject--;
            syn = 41;
        }
        pProject++;
        return;
    }
    else  if (resourceProject[pProject] == '!')
    {//解释!,!=
        pProject++;
        if (resourceProject[pProject] == '=')
        {
            syn = 43;
        }
        else
        {
            syn = 68;
            pProject--;
        }
        pProject++;
        return;
    }
    else  if (resourceProject[pProject] == '&')
    {//解释&,&&
        pProject++;
        if (resourceProject[pProject] == '&')
        {
            syn = 53;
        }
        else
        {
            pProject--;
            syn = 52;
        }
        pProject++;
        return;
    }
    else  if (resourceProject[pProject] == '|')
    {//解释|,||
        pProject++;
        if (resourceProject[pProject] == '|')
        {
            syn = 55;
        }
        else
        {
            pProject--;
            syn = 54;
        }
        pProject++;
        return;
    }
    else  if (resourceProject[pProject] == '$')//定义为结束符 
    {
        syn = 0;//种别码为0
    }
    else
    {//不能被以上词法分析识别，则出错，可扩充 
        printf("error：there is no exist %c \n", ch);
        exit(0);
    }
}
 
void* Summation(void *arg){
 FILE *fp1;	
 fun_para *para;
 para = (fun_para *) arg;
 int tNum=*(para->threadNum);
 int pProject=para->pProject,i=para->i,syn=para->syn;
     pProject= (pProject/NUM_THREADS)*tNum;
    while(pProject<(pProject/NUM_THREADS)*(tNum+1)){
    pProject=(pProject/NUM_THREADS)*tNum;
    if ((fp1 = fopen("in_compile.txt", "w+")) == NULL)
    {//打开源程序
        cout << "can't open this file";
       exit(0);
    }
    while (syn != 0)
    {
        //启动扫描
        Scanner(syn, para->resourceProject, para->token, pProject);
        if (syn == 100)
        {//标识符
            for (i = 0; i<1000; i++)
            {//插入标识符表中
                if (strcmp(IDentifierTbl[i], para->token) == 0)
                {//已在表中
                    break;
                }
                if (strcmp(IDentifierTbl[i], "") == 0)
                {//查找空间
                    strcpy(IDentifierTbl[i], para->token);
                    break;
                }
            }
            printf("(标识符  ,%s)\n", para->token);
            fprintf(fp1, "(标识符   ,%s)\n", para->token);
        }
        else if (syn >= 1 && syn <= 32)
        {//保留字
            printf("(%s   ,  --)\n", reserveWord[syn - 1]);
            fprintf(fp1, "(%s   ,  --)\n", reserveWord[syn - 1]);
        }
        else if (syn == 99)
        {//const 常数
            printf("(常数   ,   %s)\n", para->token);
            fprintf(fp1, "(常数   ,   %s)\n", para->token);
        }
        else if (syn >= 33 && syn <= 68)
        {
            printf("(%s   ,   --)\n", operatorOrDelimiter[syn - 33]);
            fprintf(fp1, "(%s   ,   --)\n", operatorOrDelimiter[syn - 33]);
        }
    }
    for (i = 0; i<15; i++)
    {//插入标识符表中
        printf("第%d个标识符：  %s\n", i + 1, IDentifierTbl[i]);
        fprintf(fp1, "第%d个标识符：  %s\n", i + 1, IDentifierTbl[i]);
    }
    fclose(fp1);
}
}

int main(){
struct fun_para para;
    int j;
    FILE *fp;
    if ((fp = fopen("in.txt", "r")) == NULL)//打开一个文件，读取其中的源程序
    {//打开源程序
        cout << "can't open this file";
        exit(0);
    }
    para.resourceProject[para.pProject] = fgetc(fp);
    while (para.resourceProject[para.pProject] != '$')
    {//将源程序读入resourceProject[]数组
        para.pProject++;
        para.resourceProject[para.pProject] = fgetc(fp);
    }
    para.resourceProject[++para.pProject] = '\0';
    fclose(fp);//关闭读入 
    cout << endl << "源程序为:" << endl;//准备同步打印到dos 
    cout << para.resourceProject << endl;
    //对源程序进行过滤
    filterResource(para.resourceProject, para.pProject);//过滤后程序 
    cout << endl << "过滤之后的程序:" << endl;
    cout << para.resourceProject << endl;
    
     pthread_t tHandles[NUM_THREADS];
     for(j=0;j<NUM_THREADS;j++ ){//为子线程分配空间 
     //强转后赋给每条线程 
     *(para.threadNum)=j;
     //  printf("threadNum is:%d\n",*threadNum);
     pthread_create(&tHandles[j],NULL,Summation,&para);//创建子线程 
 } 
 for(j=0;j<NUM_THREADS;j++){
  pthread_join(tHandles[j],NULL);//主线程等待子线程结束
 }
  return 0;
}
